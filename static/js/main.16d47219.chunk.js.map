{"version":3,"sources":["components/calendarDrawer/calendarStyle.module.scss","components/personalList/personalListStyle.module.scss","components/pages/groups/groupListStyle.module.scss","api/api.ts","store/groupListReducer.ts","store/store.ts","components/navBar/navBarDrawer.tsx","components/calendarDrawer/calendarDrawer.tsx","components/personalList/personListDrawer.tsx","components/pages/groups/groupListDrawer.tsx","components/pages/groups/groupsListContainer.tsx","store/actions/groupListActions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","instanceMock","axios","create","baseURL","serverAL","get","then","res","data","init","groups","id","name","avatar","startDate","gitLink","groupProfile","calendar","groupId","title","date","start","mentor","classification","firstName","lastName","email","phone","room","img","userList","groupsSettings","test","reducersPush","combineReducers","groupsPart","state","action","type","store","createStore","applyMiddleware","thunk","NavBarDrawer","props","Navbar","bg","variant","Brand","href","Nav","className","Link","CalendarDrawer","eventGuid","calendarStyle","main","plugins","dayGridPlugin","interactionPlugin","initialView","weekends","editable","selectable","dayMaxEvents","select","selectInfo","prompt","calendarApi","view","unselect","addEvent","String","startStr","end","endStr","allDay","events","event","PersonListDrawer","personeListDrawer","map","current","Card","style","width","Img","src","Body","Title","Text","personalListStyle","GroupListDrawer","useState","showCalendar","setShowCalendar","groupList","eventEmulator","setEventEmulator","personeList","setPersoneList","ListGroup","horizontal","groupListStyle","Item","item","slice","onClick","table","detailInfo","GroupListMainContainer","connect","getGroupsListTC","dispatch","a","groupAnswData","console","log","connector","useEffect","App","exact","from","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16d47219.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"calendarStyle_main__14bkm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"personalListStyle_main__2NsP4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"groupListStyle_main__3QzDM\",\"table\":\"groupListStyle_table__3XE5t\",\"ListGroup\":\"groupListStyle_ListGroup__3RBc6\",\"item\":\"groupListStyle_item__G3vyA\",\"detailInfo\":\"groupListStyle_detailInfo__rp0jI\"};","import axios from 'axios'\r\nimport { groupType} from '../store/types/storeTypes'\r\n\r\n//import { invoiceType } from '../store/types/storeTypes';\r\n//https://mockapi.io/projects/60d5f509943aa60017768d24\r\n//https://60d5f509943aa60017768d23.mockapi.io/groups\r\n\r\nconst instanceMock = axios.create({\r\n  baseURL: 'https://60d5f509943aa60017768d23.mockapi.io',\r\n})\r\n\r\ntype serverType = {\r\n  getGroupList: Function\r\n}\r\n\r\nexport const serverAL: serverType = {\r\n \r\n  getGroupList: () => {\r\n    return instanceMock.get<Array<groupType>>('/groups').then((res) => {\r\n      return res.data\r\n    })\r\n  },\r\n}\r\n","import { mainGroupListType, getActionTypes } from './types/storeTypes'\r\n\r\nimport * as actions from './actions/groupListActions'\r\nimport { Dispatch } from 'react'\r\nimport { serverAL } from '../api/api'\r\n\r\n\r\n\r\ntype GroupsActionTypes = ReturnType<getActionTypes<typeof actions>>\r\n\r\nconst init: mainGroupListType = {\r\n  groups: [\r\n    {\r\n      id: 'load',\r\n      name: 'bor',\r\n      avatar: 'link',\r\n      startDate: 'load',\r\n      gitLink: 'load',\r\n      groupProfile: 'load',\r\n      calendar: [\r\n        {\r\n          id: '1',\r\n          groupId: '1',\r\n          title: 'Lection1',\r\n          date: '2021-06-07',\r\n          start: '2021-06-07T16:10:00'\r\n        },\r\n        {\r\n          id: '2',\r\n          groupId: '1',\r\n          title: 'Lection2',\r\n          date: '2021-06-01',\r\n          start: '2021-06-01T15:20:00'\r\n        }\r\n      ],\r\n\r\n      mentor: {\r\n        id: 'load',\r\n        classification: 'mentor',\r\n        firstName: 'string',\r\n        lastName: 'string',\r\n        email: 'string',\r\n        phone: 'string',\r\n        room: 'string',\r\n        img: 'pick',\r\n      },\r\n      userList: [\r\n        {\r\n          id: 'load',\r\n          classification: 'intern',\r\n          firstName: 'string',\r\n          lastName: 'string',\r\n          email: 'string',\r\n          phone: 'string',\r\n          room: 'string',\r\n          img: 'pick',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  groupsSettings: {\r\n    test: 'load',\r\n  },\r\n}\r\n// ========================================\r\n//\r\nexport function groupsListReducer(\r\n  state: mainGroupListType = init,\r\n  action: GroupsActionTypes\r\n): mainGroupListType {\r\n  switch (action.type) {\r\n    // --------------\r\n\r\n    case 'SET-GROUPS-LIST/group-list-type': {\r\n      return {\r\n        ...state,\r\n        groups: [...action.data],\r\n      }\r\n    }\r\n\r\n    // --------------\r\n    default:\r\n      return state\r\n  }\r\n}\r\n// ========================================\r\n\r\n// ========================================\r\nexport const getGroupsListTC =\r\n  () => async (dispatch: Dispatch<GroupsActionTypes>) => {\r\n    try {\r\n      const groupAnswData = await serverAL.getGroupList()\r\n\r\n      dispatch(actions.setGroupList(groupAnswData))\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\n\r\nimport thunk from 'redux-thunk' //thunk middleware\r\nimport { groupsListReducer } from './groupListReducer'\r\n\r\nconst reducersPush = combineReducers({\r\n  groupsPart: groupsListReducer,\r\n \r\n})\r\n\r\nexport type globalStateType = ReturnType<typeof reducersPush>\r\n\r\nconst store = createStore(reducersPush, applyMiddleware(thunk))\r\nexport default store\r\n","import {Form, Button, FormControl, Nav, Navbar } from \"react-bootstrap\";\r\n\r\nexport function NavBarDrawer(props:any)\r\n{\r\n  return(\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#\"> Intern management System </Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"#groups\">Groups</Nav.Link>\r\n      <Nav.Link href=\"#bib\">Functional</Nav.Link>\r\n      <Nav.Link href=\"#did\">Functional</Nav.Link>\r\n    </Nav>\r\n  \r\n  </Navbar>\r\n  )\r\n}","\r\nimport FullCalendar, { DatePointApi, DateSelectArg } from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\n\r\nimport interactionPlugin from \"@fullcalendar/interaction\"\r\n\r\nimport calendarStyle from \"./calendarStyle.module.scss\";\r\n\r\nexport function CalendarDrawer(props: any) {\r\n  let eventGuid = 0;\r\n\r\n  function createEventId() {\r\n    return String(eventGuid++);\r\n  }\r\n\r\n  const handleDateSelect = (selectInfo: DateSelectArg) => {\r\n    const title = prompt('Please enter a new title for your event');\r\n    const calendarApi = selectInfo.view.calendar;\r\n\r\n    calendarApi.unselect(); // clear date selection\r\n\r\n    if (title) {\r\n      calendarApi.addEvent({\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay\r\n      });\r\n    }\r\n  }\r\n\r\n  /*  const handleDateClick = (arg: DatePointApi) => { \r\n     alert(arg.dateStr)\r\n   } */\r\n  return (\r\n    <div className={calendarStyle.main}>\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, interactionPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        weekends={false}\r\n        editable={true}\r\n        selectable={true}\r\n        dayMaxEvents={true}\r\n        select={handleDateSelect}\r\n\r\n\r\n        events={props.event}\r\n      />\r\n    </div>\r\n  )\r\n}","import { Card } from \"react-bootstrap\";\r\nimport { person } from \"../../store/types/storeTypes\";\r\nimport personalListStyle from \"./personalListStyle.module.scss\";\r\ntype withData<Type> = { data: Type }\r\n\r\nexport const PersonListDrawer = (props: withData<Array<person>>) => {\r\n  const personeListDrawer = props.data.map((current) => {\r\n    return (\r\n      <div>\r\n        <Card style={{ width: '14rem' }}>\r\n          <Card.Img variant=\"top\" src={current.img} />\r\n          <Card.Body>\r\n            <Card.Title>{current.firstName} {current.lastName}</Card.Title>\r\n\r\n            <Card.Text>\r\n              <a href={`mailo:${current.email}`} >Mail </a>\r\n              <a href={`tel:${current.phone}`} >Phone </a> <br />\r\n              Room:  {current.room}<br />\r\n              Position: {current.classification}<br />\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    )\r\n  })\r\n  return (\r\n    <div  className={personalListStyle.main}> {personeListDrawer}</div>\r\n  )\r\n}","\r\nimport { useState } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nimport groupListStyle from \"./groupListStyle.module.scss\";\r\nimport { groupListConectedType } from \"./groupsListContainer\";\r\n\r\n\r\nimport { CalendarDrawer } from \"../../calendarDrawer/calendarDrawer\";\r\nimport { calendarType, person } from \"../../../store/types/storeTypes\";\r\nimport { PersonListDrawer } from \"../../personalList/personListDrawer\";\r\n\r\n\r\nexport const GroupListDrawer = (props: groupListConectedType) => {\r\n\r\n  const [showCalendar, setShowCalendar] = useState(true);\r\n  const [eventEmulator, setEventEmulator] = useState<Array<calendarType>>(props.groupList[1].calendar);\r\n  const [personeList, setPersoneList] = useState(props.groupList[0].userList as Array<person>);\r\n  const handleCalendarClick = (data: Array<calendarType>) => {\r\n    setShowCalendar(true)\r\n    setEventEmulator(data)\r\n   \r\n\r\n    return (null)\r\n  }\r\n  const handleGrouopClick = (data: Array<person>) => {\r\n    setShowCalendar(false)\r\n    setPersoneList(data)\r\n    return (null)\r\n  }\r\n\r\n  const groupList = props.groupList.map(current => {\r\n    return (\r\n\r\n      <ListGroup horizontal={'lg'} key={current.id} className={groupListStyle.ListGroup}>\r\n        <ListGroup.Item className={groupListStyle.item} variant=\"primary\">{current.name}</ListGroup.Item>\r\n        <ListGroup.Item className={groupListStyle.item} variant=\"secondary\">{current.startDate.slice(0, 10)}</ListGroup.Item>\r\n        <ListGroup.Item className={groupListStyle.item} variant=\"secondary\"> {current.gitLink}  </ListGroup.Item>\r\n        <ListGroup.Item className={groupListStyle.item} variant=\"secondary\">{current.groupProfile}</ListGroup.Item>\r\n        <ListGroup.Item className={groupListStyle.item} onClick={() => handleCalendarClick(current.calendar)}  action variant=\"info\">Calendar</ListGroup.Item>\r\n        <ListGroup.Item className={groupListStyle.item} onClick={() => handleGrouopClick(current.userList)} action variant=\"info\" >Group list</ListGroup.Item>\r\n      </ListGroup>\r\n\r\n\r\n    )\r\n  })\r\n\r\n\r\n\r\n  return (\r\n    <div className={groupListStyle.main}>\r\n\r\n      <div className={groupListStyle.table}>\r\n\r\n        <ListGroup horizontal={'lg'} className={groupListStyle.ListGroup} >\r\n          <ListGroup.Item className={groupListStyle.item} variant=\"warning\">Group name</ListGroup.Item>\r\n          <ListGroup.Item className={groupListStyle.item} variant=\"warning\">Start Date</ListGroup.Item>\r\n          <ListGroup.Item className={groupListStyle.item} variant=\"warning\"> Git Link </ListGroup.Item>\r\n          <ListGroup.Item className={groupListStyle.item} variant=\"warning\">Group Profile</ListGroup.Item>\r\n          <ListGroup.Item className={groupListStyle.item} variant=\"warning\">Calendar</ListGroup.Item>\r\n          <ListGroup.Item className={groupListStyle.item} variant=\"warning\">Group list</ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        {groupList}\r\n      </div>\r\n      <div className={groupListStyle.detailInfo}>\r\n\r\n        {showCalendar ? <CalendarDrawer event={eventEmulator} /> : <PersonListDrawer data={personeList} />}\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n","import { useEffect } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { getGroupsListTC } from \"../../../store/groupListReducer\";\r\n\r\nimport { globalStateType } from \"../../../store/store\";\r\nimport { GroupListDrawer } from \"./groupListDrawer\";\r\n\r\nconst mapStateToProps = (state: globalStateType) => {\r\n  return {\r\n    groupList: state.groupsPart.groups,\r\n  }\r\n};\r\n\r\nconst connector = connect(mapStateToProps, { getGroupsListTC })\r\nexport type groupListConectedType = ConnectedProps<typeof connector>\r\n\r\nfunction GroupListCC(props: groupListConectedType) {\r\n\r\n  useEffect(() => {\r\n    props.getGroupsListTC();\r\n  }, []);\r\n\r\n\r\n\r\n  return <GroupListDrawer {...props} />;\r\n}\r\n\r\n// ========================================\r\n\r\n\r\nexport const GroupListMainContainer = connector(GroupListCC);\r\n\r\n\r\n","import { groupType } from \"../types/storeTypes\";\r\n\r\n\r\nexport const setGroupList = (data:Array <groupType>) => ({\r\n  type: 'SET-GROUPS-LIST/group-list-type',\r\n  data\r\n}as const)\r\n// --------------\r\n\r\n","import \"./App.css\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { NavBarDrawer } from \"./components/navBar/navBarDrawer\";\r\nimport { GroupListMainContainer } from \"./components/pages/groups/groupsListContainer\";\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <NavBarDrawer/>\r\n      <Switch>\r\n        <Redirect exact from=\"/\" to=\"/groups\" />\r\n\r\n\r\n        <Route path=\"/groups\" component={GroupListMainContainer} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/store'\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}