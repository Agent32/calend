{"version":3,"sources":["components/pages/groups/groupListStyle.module.scss","api/api.ts","store/groupListReducer.ts","store/store.ts","components/navBar/navBarDrawer.tsx","components/pages/groups/groupListDrawer.tsx","components/pages/groups/groupsListContainer.tsx","store/actions/groupListActions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","instanceMock","axios","create","baseURL","serverAL","get","then","res","data","init","groups","id","name","avatar","startDate","endDate","groupProfile","calendar","groupId","title","date","start","mentor","userList","classification","firstName","lastName","email","phone","room","img","groupsSettings","test","reducersPush","combineReducers","groupsPart","state","action","type","store","createStore","applyMiddleware","thunk","NavBarDrawer","props","Navbar","bg","variant","Brand","href","Nav","className","Link","GroupListDrawer","useState","groupList","map","current","groupListStyle","groupAva","src","alt","slice","main","Table","striped","bordered","hover","size","GroupListMainContainer","connect","getGroupsListTC","dispatch","a","groupAnswData","console","log","connector","useEffect","App","exact","from","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06e893e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"groupListStyle_main__2DL7u\",\"groupAva\":\"groupListStyle_groupAva__1hXbG\"};","import axios from 'axios'\r\nimport { groupType} from '../store/types/storeTypes'\r\n\r\n//import { invoiceType } from '../store/types/storeTypes';\r\n//https://mockapi.io/projects/60d5f509943aa60017768d24\r\n//https://60d5f509943aa60017768d23.mockapi.io/groups\r\n\r\nconst instanceMock = axios.create({\r\n  baseURL: 'https://60d5f509943aa60017768d23.mockapi.io',\r\n})\r\n\r\ntype serverType = {\r\n  getGroupList: Function\r\n}\r\n\r\nexport const serverAL: serverType = {\r\n \r\n  getGroupList: () => {\r\n    return instanceMock.get<Array<groupType>>('/groups').then((res) => {\r\n      return res.data\r\n    })\r\n  },\r\n}\r\n","import { mainGroupListType, getActionTypes } from './types/storeTypes'\r\n\r\nimport * as actions from './actions/groupListActions'\r\nimport { Dispatch } from 'react'\r\nimport { serverAL } from '../api/api'\r\n\r\n\r\n\r\ntype GroupsActionTypes = ReturnType<getActionTypes<typeof actions>>\r\n\r\nconst init: mainGroupListType = {\r\n  groups: [\r\n    {\r\n      id: 'load',\r\n      name: 'bor',\r\n      avatar: 'link',\r\n      startDate: 'load',\r\n      endDate: 'load',\r\n      groupProfile: 'load',\r\n      calendar: [\r\n        {\r\n          id: '1',\r\n          groupId: '1',\r\n          title: 'Lection1',\r\n          date: '2021-06-07',\r\n          start: '2021-06-07T16:10:00'\r\n        },\r\n        {\r\n          id: '2',\r\n          groupId: '1',\r\n          title: 'Lection2',\r\n          date: '2021-06-01',\r\n          start: '2021-06-01T15:20:00'\r\n        }\r\n      ],\r\n\r\n      mentor: 'load',\r\n      userList: [\r\n        {\r\n          id: 'load',\r\n          classification: 'intern',\r\n          firstName: 'string',\r\n          lastName: 'string',\r\n          email: 'string',\r\n          phone: 'string',\r\n          room: 'string',\r\n          img: 'pick',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  groupsSettings: {\r\n    test: 'load',\r\n  },\r\n}\r\n// ========================================\r\n//\r\nexport function groupsListReducer(\r\n  state: mainGroupListType = init,\r\n  action: GroupsActionTypes\r\n): mainGroupListType {\r\n  switch (action.type) {\r\n    // --------------\r\n\r\n    case 'SET-GROUPS-LIST/group-list-type': {\r\n      return {\r\n        ...state,\r\n        groups: [...action.data],\r\n      }\r\n    }\r\n\r\n    // --------------\r\n    default:\r\n      return state\r\n  }\r\n}\r\n// ========================================\r\n\r\n// ========================================\r\nexport const getGroupsListTC =\r\n  () => async (dispatch: Dispatch<GroupsActionTypes>) => {\r\n    try {\r\n      const groupAnswData = await serverAL.getGroupList()\r\n\r\n      dispatch(actions.setGroupList(groupAnswData))\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\n\r\nimport thunk from 'redux-thunk' //thunk middleware\r\nimport { groupsListReducer } from './groupListReducer'\r\n\r\nconst reducersPush = combineReducers({\r\n  groupsPart: groupsListReducer,\r\n \r\n})\r\n\r\nexport type globalStateType = ReturnType<typeof reducersPush>\r\n\r\nconst store = createStore(reducersPush, applyMiddleware(thunk))\r\nexport default store\r\n","import {Form, Button, FormControl, Nav, Navbar } from \"react-bootstrap\";\r\n\r\nexport function NavBarDrawer(props:any)\r\n{\r\n  return(\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#\"> Intern management System </Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"#groups\">Groups</Nav.Link>\r\n      <Nav.Link href=\"#bib\">Functional</Nav.Link>\r\n      <Nav.Link href=\"#did\">Functional</Nav.Link>\r\n    </Nav>\r\n  \r\n  </Navbar>\r\n  )\r\n}","\r\nimport { useState } from \"react\";\r\nimport { ListGroup, Table } from \"react-bootstrap\";\r\n\r\nimport groupListStyle from \"./groupListStyle.module.scss\";\r\nimport { groupListConectedType } from \"./groupsListContainer\";\r\n\r\n\r\nimport { CalendarDrawer } from \"../../calendarDrawer/calendarDrawer\";\r\nimport { calendarType, person } from \"../../../store/types/storeTypes\";\r\nimport { PersonListDrawer } from \"../../personalList/personListDrawer\";\r\n\r\n\r\nexport const GroupListDrawer = (props: groupListConectedType) => {\r\n\r\n  const [showCalendar, setShowCalendar] = useState(true);\r\n  const [eventEmulator, setEventEmulator] = useState<Array<calendarType>>(props.groupList[0].calendar);\r\n  const [personeList, setPersoneList] = useState(props.groupList[0].userList as Array<person>);\r\n  const handleCalendarClick = (data: Array<calendarType>) => {\r\n    setShowCalendar(true)\r\n    setEventEmulator(data)\r\n\r\n    return (null)\r\n  }\r\n  const handleGrouopClick = (data: Array<person>) => {\r\n    setShowCalendar(false)\r\n    setPersoneList(data)\r\n    return (null)\r\n  }\r\n\r\n\r\n\r\n  const groupList = props.groupList.map(current => {\r\n    debugger\r\n    return (\r\n\r\n      <tr key={current.id} >\r\n\r\n        <td className={groupListStyle.groupAva} ><img src={current.avatar} alt='ava' /></td>\r\n        <td>{current.name}</td>\r\n        <td>{current.mentor}</td>\r\n        <td> {current.startDate.slice(0, 10)} </td>\r\n        <td> {current.endDate.slice(0, 10)}</td>\r\n        <td>{current.groupProfile}</td>\r\n\r\n      </tr>\r\n\r\n\r\n    )\r\n  })\r\n\r\n\r\n  return (\r\n    <div className={groupListStyle.main}>\r\n\r\n      <Table striped bordered hover size=\"sm\" >\r\n        <thead>\r\n          <tr>\r\n            <th>Avatar</th>\r\n            <th>Group name</th>\r\n            <th>Mentor</th>\r\n            <th>Start Date</th>\r\n            <th>End Date</th>\r\n            <th>Ð¡ourse</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {groupList}\r\n        </tbody>\r\n      </Table>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n","import { useEffect } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { getGroupsListTC } from \"../../../store/groupListReducer\";\r\n\r\nimport { globalStateType } from \"../../../store/store\";\r\nimport { GroupListDrawer } from \"./groupListDrawer\";\r\n\r\nconst mapStateToProps = (state: globalStateType) => {\r\n  return {\r\n    groupList: state.groupsPart.groups,\r\n  }\r\n};\r\n\r\nconst connector = connect(mapStateToProps, { getGroupsListTC })\r\nexport type groupListConectedType = ConnectedProps<typeof connector>\r\n\r\nfunction GroupListCC(props: groupListConectedType) {\r\n\r\n  useEffect(() => {\r\n    props.getGroupsListTC();\r\n  }, []);\r\n\r\n\r\n\r\n  return <GroupListDrawer {...props} />;\r\n}\r\n\r\n// ========================================\r\n\r\n\r\nexport const GroupListMainContainer = connector(GroupListCC);\r\n\r\n\r\n","import { groupType } from \"../types/storeTypes\";\r\n\r\n\r\nexport const setGroupList = (data:Array <groupType>) => ({\r\n  type: 'SET-GROUPS-LIST/group-list-type',\r\n  data\r\n}as const)\r\n// --------------\r\n\r\n","import \"./App.css\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { NavBarDrawer } from \"./components/navBar/navBarDrawer\";\r\nimport { GroupListMainContainer } from \"./components/pages/groups/groupsListContainer\";\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <NavBarDrawer/>\r\n      <Switch>\r\n        <Redirect exact from=\"/\" to=\"/groups\" />\r\n\r\n\r\n        <Route path=\"/groups\" component={GroupListMainContainer} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/store'\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}